uv
==
Python versions:
    uv python install: Install Python versions.
    uv python list: View available Python versions.
    uv python find: Find an installed Python version.
    uv python pin: Pin the current project to use a specific Python version.
    uv python uninstall: Uninstall a Python version.


Scripts
    Executing standalone Python scripts, e.g., example.py.

    uv run: Run a script.
    uv add --script: Add a dependency to a script
    uv remove --script: Remove a dependency from a script

Projects
    Creating and working on Python projects, i.e., with a pyproject.toml.

    uv init: Create a new Python project.
    uv add: Add a dependency to the project.
        - uv add -r requirements.txt -c requirements.txt
        - uv pip sync requirements.txt
    uv remove: Remove a dependency from the project.
    uv sync: Sync the project's dependencies with the environment.
    uv lock: Create a lockfile for the project's dependencies.
    uv run: Run a command in the project environment.
    uv tree: View the dependency tree for the project.
    uv build: Build the project into distribution archives.
    uv publish: Publish the project to a package index.


Tools
    Running and installing tools published to Python package indexes, e.g., ruff or black.

    uvx / uv tool run: Run a tool in a temporary environment.
    uv tool install: Install a tool user-wide.
    uv tool uninstall: Uninstall a tool.
    uv tool list: List installed tools.
    uv tool update-shell: Update the shell to include tool executables.


Utility
    Managing and inspecting uv's state, such as the cache, storage directories, or performing a self-update:

    uv cache clean: Remove cache entries.
    uv cache prune: Remove outdated cache entries.
    uv cache dir: Show the uv cache directory path.
    uv tool dir: Show the uv tool directory path.
    uv python dir: Show the uv installed Python versions path.
    uv self update: Update uv to the latest version.



The pip interface:

    Manually managing environments and packages â€” intended to be used in legacy workflows or cases where the high-level commands do not provide enough control.

    Creating virtual environments (replacing venv and virtualenv):

    uv venv: Create a new virtual environment.
    See the documentation on using environments for details.

    Managing packages in an environment (replacing pip and pipdeptree):

    uv pip install: Install packages into the current environment.
    uv pip show: Show details about an installed package.
    uv pip freeze: List installed packages and their versions.
    uv pip check: Check that the current environment has compatible packages.
    uv pip list: List installed packages.
    uv pip uninstall: Uninstall packages.
    uv pip tree: View the dependency tree for the environment.
    See the documentation on managing packages for details.

    Locking packages in an environment (replacing pip-tools):

    uv pip compile: Compile requirements into a lockfile.
    uv pip sync: Sync an environment with a lockfile.


To install a Python version at a specific version:
    uv python install 3.12.3
    To install the latest patch version:

    uv python install 3.12
    To install a version that satisfies constraints:

    uv python install '>=3.8,<3.10'
    To install multiple versions:

    uv python install 3.9 3.10 3.11



Viewing available Python versions
To list installed and available Python versions:


    uv python list
    To filter the Python versions, provide a request, e.g., to show all Python 3.13 interpreters:


    uv python list 3.13
    Or, to show all PyPy interpreters:


    uv python list pypy
    By default, downloads for other platforms and old patch versions are hidden.

    To view all versions:


    uv python list --all-versions
    To view Python versions for other platforms:


    uv python list --all-platforms
    To exclude downloads and only show installed Python versions:


    uv python list --only-installed


uv venv  # creates a .venv folder
uv venv <name>  - test
    - test\Scripts\activate
    - deactivate

source .venv/bin/activate
uv add "mcp[cli]" --active
uv run --active main.py